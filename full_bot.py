import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID —Å—é–¥–∞ (–∏–ª–∏ —á–µ—Ä–µ–∑ set –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
TOKEN = os.getenv("TELEGRAM_TOKEN") or "8396815728:AAGXIPYdKF7oTSbP7-cEWXCSMP73ZvFnP0k"
OWNER_ID = int(os.getenv("OWNER_ID") or "123456789")

logging.basicConfig(level=logging.INFO)

# –î–∞–Ω–Ω—ã–µ
checklist = [
    "üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã",
    "üëó –ö—É–ø–∏—Ç—å –ø–ª–∞—Ç—å–µ –∏ –∫–æ—Å—Ç—é–º",
    "üìú –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ó–ê–ì–°",
    "üèõÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
    "üì∑ –ù–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞",
    "üéµ –í—ã–±—Ä–∞—Ç—å –º—É–∑—ã–∫—É",
    "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    "üíç –ö—É–ø–∏—Ç—å –∫–æ–ª—å—Ü–∞"
]

guests = {}
budget = []
reminders = []
zagc_address = "—É–ª. –°–≤–∞–¥–µ–±–Ω–∞—è, 1"
restaurant_address = "–ø—Ä. –õ—é–±–≤–∏, 5"

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë∞ –ü—Ä–∏–≤–µ—Ç –Ø—Ä–æ—Å–ª–∞–≤ –ö—Å–µ–Ω–∏  ! –Ø —Å–≤–∞–¥–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "/checklist ‚Äì —á–µ–∫-–ª–∏—Å—Ç\n"
        "/guest ‚Äì —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π\n"
        "/addguest –ò–º—è —Å—Ç–∞—Ç—É—Å\n"
        "/budget ‚Äì –±—é–¥–∂–µ—Ç\n"
        "/addbudget —Ç–∏–ø —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "/reminders ‚Äì –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/addreminder —Ç–µ–∫—Å—Ç\n"
        "/place ‚Äì –∞–¥—Ä–µ—Å–∞\n"
        "/info ‚Äì –∏–Ω—Ñ–æ –¥–ª—è –≥–æ—Å—Ç–µ–π"
    )

async def checklist_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìã –ß–µ–∫-–ª–∏—Å—Ç:\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(checklist))
    await update.message.reply_text(msg)

async def guest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not guests:
        await update.message.reply_text("–ì–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    text = "üë• –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π:\n"
    for name, status in guests.items():
        text += f"{name} ‚Äî {status}\n"
    await update.message.reply_text(text)

async def addguest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /addguest –ò–≥–æ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª")
        return
    guests[args[0]] = args[1]
    await update.message.reply_text("–ì–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω!")

async def budget_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not budget:
        await update.message.reply_text("–ë—é–¥–∂–µ—Ç –ø—É—Å—Ç.")
        return
    total = 0
    msg = "üí∞ –ë—é–¥–∂–µ—Ç:\n"
    for entry in budget:
        if entry['type'] == '—Ä–∞—Å—Ö–æ–¥':
            total -= entry['amount']
        else:
            total += entry['amount']
        msg += f"{entry['type']}: {entry['amount']}‚ÇΩ ‚Äî {entry['note']}\n"
    msg += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    await update.message.reply_text(msg)

async def addbudget_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /addbudget —Ä–∞—Å—Ö–æ–¥ 5000 –ø–ª–∞—Ç—å–µ")
        return
    try:
        amount = int(args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    budget.append({"type": args[0], "amount": amount, "note": " ".join(args[2:])})
    await update.message.reply_text("–ë—é–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

async def reminders_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not reminders:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
    else:
        await update.message.reply_text("\n".join(f"üîî {r}" for r in reminders))

async def addreminder_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = " ".join(context.args)
    if not txt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return
    reminders.append(txt)
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

async def place_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üèõÔ∏è –ó–ê–ì–°: {zagc_address}\nüçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_address}"
    )

async def info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÑ –ò–Ω—Ñ–æ –¥–ª—è –≥–æ—Å—Ç–µ–π:\n"
        "- –ó–ê–ì–° –≤ 14:00\n"
        "- –ü–æ—Å–ª–µ ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω\n"
        "- –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ —É–ª—ã–±–∫–∏ üòä"
    )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /start")

# –ó–∞–ø—É—Å–∫
def main():
    if "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–¢–û–ö–ï–ù" in TOKEN:
        print("‚ùå –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("checklist", checklist_cmd))
    app.add_handler(CommandHandler("guest", guest_cmd))
    app.add_handler(CommandHandler("addguest", addguest_cmd))
    app.add_handler(CommandHandler("budget", budget_cmd))
    app.add_handler(CommandHandler("addbudget", addbudget_cmd))
    app.add_handler(CommandHandler("reminders", reminders_cmd))
    app.add_handler(CommandHandler("addreminder", addreminder_cmd))
    app.add_handler(CommandHandler("place", place_cmd))
    app.add_handler(CommandHandler("info", info_cmd))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    app.run_polling()

if __name__ == "__main__":
    main()
