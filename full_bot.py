python-telegram-bot==20.8
import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))

# –î–∞–Ω–Ω—ã–µ
checklist = [
    "üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã",
    "üëó –ö—É–ø–∏—Ç—å –ø–ª–∞—Ç—å–µ –∏ –∫–æ—Å—Ç—é–º",
    "üìú –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ó–ê–ì–°",
    "üèõÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
    "üì∑ –ù–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞/–≤–∏–¥–µ–æ–≥—Ä–∞—Ñ–∞",
    "üéµ –í—ã–±—Ä–∞—Ç—å –º—É–∑—ã–∫—É",
    "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    "üíç –ö—É–ø–∏—Ç—å –∫–æ–ª—å—Ü–∞"
]

guests = {}  # {–∏–º—è: —Å—Ç–∞—Ç—É—Å}
budget = []  # [{type: '—Ä–∞—Å—Ö–æ–¥'/'–¥–æ—Ö–æ–¥', amount: int, note: str}]
reminders = []  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
zagc_address = "—É–ª. –°–≤–∞–¥–µ–±–Ω–∞—è, 1"
restaurant_address = "–ø—Ä. –õ—é–±–≤–∏, 5"

# --- –ö–æ–º–∞–Ω–¥—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë∞ü§µ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–≤–∞–¥–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/checklist ‚Äì —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "/guest ‚Äì —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π\n"
        "/addguest ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è\n"
        "/budget ‚Äì –±—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã\n"
        "/addbudget ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥\n"
        "/reminders ‚Äì –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/addreminder ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/place ‚Äì –∞–¥—Ä–µ—Å –ó–ê–ì–°–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥–æ—Å—Ç–µ–π"
    )

# ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç
async def checklist_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply = "üìã –ß–µ–∫-–ª–∏—Å—Ç:\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(checklist))
    await update.message.reply_text(reply)

# üë• –ì–æ—Å—Ç–∏
async def guest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not guests:
        await update.message.reply_text("–ì–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        msg = "üë• –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π:\n"
        for name, status in guests.items():
            emoji = "‚úÖ" if status == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª" else "‚ùå"
            msg += f"{emoji} {name} ‚Äî {status}\n"
        await update.message.reply_text(msg)

async def addguest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addguest –ò–º—è —Å—Ç–∞—Ç—É—Å(–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª/–Ω–µ—Ç)")
        return
    name = args[0]
    status = args[1].lower()
    if status not in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª", "–Ω–µ—Ç"]:
        await update.message.reply_text("–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª' –∏–ª–∏ '–Ω–µ—Ç'")
        return
    guests[name] = status
    await update.message.reply_text(f"–ì–æ—Å—Ç—å {name} –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")

# üí∞ –ë—é–¥–∂–µ—Ç
async def budget_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not budget:
        await update.message.reply_text("–ë—é–¥–∂–µ—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return
    msg = "üí∞ –ë—é–¥–∂–µ—Ç:\n"
    total = 0
    for entry in budget:
        sign = "-" if entry["type"] == "—Ä–∞—Å—Ö–æ–¥" else "+"
        total += -entry["amount"] if entry["type"] == "—Ä–∞—Å—Ö–æ–¥" else entry["amount"]
        msg += f"{sign}{entry['amount']}‚ÇΩ ‚Äî {entry['note']}\n"
    msg += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    await update.message.reply_text(msg)

async def addbudget_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addbudget —Ç–∏–ø —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: /addbudget —Ä–∞—Å—Ö–æ–¥ 5000 –∫–æ—Å—Ç—é–º")
        return
    b_type = args[0].lower()
    if b_type not in ["—Ä–∞—Å—Ö–æ–¥", "–¥–æ—Ö–æ–¥"]:
        await update.message.reply_text("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '—Ä–∞—Å—Ö–æ–¥' –∏–ª–∏ '–¥–æ—Ö–æ–¥'")
        return
    try:
        amount = int(args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    note = " ".join(args[2:])
    budget.append({"type": b_type, "amount": amount, "note": note})
    await update.message.reply_text(f"{b_type.capitalize()} {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {note}")

# üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminders_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not reminders:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        msg = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(f"‚Äì {r}" for r in reminders)
        await update.message.reply_text(msg)

async def addreminder_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addreminder —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return
    text = " ".join(args)
    reminders.append(text)
    await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# üìç –ê–¥—Ä–µ—Å
async def place_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìç –ê–¥—Ä–µ—Å–∞:\n\n"
        f"üèõÔ∏è –ó–ê–ì–°: {zagc_address}\n"
        f"üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_address}"
    )

# üìÑ –ò–Ω—Ñ–æ –¥–ª—è –≥–æ—Å—Ç–µ–π
async def info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéâ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥–æ—Å—Ç–µ–π:\n"
        "- –ù–∞—á–∞–ª–æ –≤ 14:00 –≤ –ó–ê–ì–°–µ\n"
        "- –ü–æ—Å–ª–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ ‚Äî –±–∞–Ω–∫–µ—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\n"
        "- –ü—Ä–æ—Å—å–±–∞ –±—ã—Ç—å –≤–æ–≤—Ä–µ–º—è –∏ —Å —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º üòä"
    )

# üß† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def unknown_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    if not TOKEN:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_TOKEN –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("checklist", checklist_cmd))
    app.add_handler(CommandHandler("guest", guest_cmd))
    app.add_handler(CommandHandler("addguest", addguest_cmd))
    app.add_handler(CommandHandler("budget", budget_cmd))
    app.add_handler(CommandHandler("addbudget", addbudget_cmd))
    app.add_handler(CommandHandler("reminders", reminders_cmd))
    app.add_handler(CommandHandler("addreminder", addreminder_cmd))
    app.add_handler(CommandHandler("place", place_cmd))
    app.add_handler(CommandHandler("info", info_cmd))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))

    app.run_polling()

if __name__ == "__main__":
    main()
